MINFFT
------
A minimalistic Fast Fourier Transform library.


OVERVIEW
--------
The library routines compute:

* Forward and inverse complex DFT,
* Forward and inverse DFT of real data,
* Cosine and sine transforms of types 2, 3, 4

of any dimensionality and power-of-two lengths.

The library provides C and Fortran interfaces.


INTERFACE
---------
All transform routines take three arguments:

* a pointer to input data,
* a pointer to output data,
* a pointer to auxiliary data.

The transform routines are capable of both in-place and out-of-place
operation. In the latter case the input is left intact.

Auxiliary data contain chains of precomputed constants and temporary
memory buffers, required by a transform routine to do its job. Once
prepared, the auxiliary data can be reused as many times as needed.
Also, the same auxiliary data fit for both forward and inverse
transforms of the same kind.

These examples show how the library functions are used:

C:
	#include "minfft.h"
	minfft_cmpl x[N],y[N]; // input and output buffers
	minfft_aux *a; // aux data
	// prepare aux data
	a=minfft_mkaux_dft_1d(N);
	// do transforms
	minfft_dft(x,y,a);
	minfft_invdft(y,x,a);
	// free aux data
	minfft_free_aux(a);

Fortran:
	use minfft
	complex(minfft_cmpl),dimension(n) :: x,y ! input and output buffers
	type(minfft_aux) :: a ! aux data
	! prepare aux data
	a=minfft_mkaux_dft_1d(n)
	! do transforms
	call minfft_dft(x,y,a)
	call minfft_invdft(y,x,a)
	! free aux data
	call minfft_free_aux(a)


DATA TYPES
----------
The library defines its own types for real and complex numbers, and for
auxiliary data:

C:
	minfft_real
	minfft_cmpl
	minfft_aux

Fortran:
	real(minfft_real)
	complex(minfft_cmpl)
	type(minfft_aux)

By default, minfft_real is double. If C99 native complex is available,
then minfft_cmpl is double complex. Otherwise, minfft_cmpl is an array
of two minfft_reals.

To build single or extended precision versions, define MINFFT_SINGLE or
MINFFT_EXTENDED macros.


TRANSFORMS
----------
Below is a list of transforms with their definitions, auxiliary data
makers, and transform routines.

For convenience, we provide aux data makers for one-, two- and
three-dimensional transforms, along with a generic any-dimensional one.
The dimensions are passed to aux maker routines in the C order (most
rapidly varying index is the last). So, when calling from Fortran,
array dimensions must be passed in the reverse order:

	complex(minfft_cmpl),dimension(n1,n2,n3) :: z
	a=minfft_mkaux_dft_3d(n3,n2,n1)

Auxiliary data makers return NULL if an error occured.

Our definitions of transforms, and input and output data format of the
transform routines, are fully compatible with FFTW.

Complex DFT:
	minfft_aux* minfft_mkaux_dft_1d (int N);
	minfft_aux* minfft_mkaux_dft_2d (int N1, int N2);
	minfft_aux* minfft_mkaux_dft_3d (int N1, int N2, int N3);
	minfft_aux* minfft_mkaux_dft (int d, int *Ns);
	void minfft_dft (minfft_cmpl *x, minfft_cmpl *y, const minfft_aux *a);

Inverse complex DFT:
	minfft_aux* minfft_mkaux_dft_1d (int N);
	minfft_aux* minfft_mkaux_dft_2d (int N1, int N2);
	minfft_aux* minfft_mkaux_dft_3d (int N1, int N2, int N3);
	minfft_aux* minfft_mkaux_dft (int d, int *Ns);
	void minfft_invdft (minfft_cmpl *x, minfft_cmpl *y, const minfft_aux *a);

Real DFT:
	minfft_aux* minfft_mkaux_realdft_1d (int N);
	minfft_aux* minfft_mkaux_realdft_2d (int N1, int N2);
	minfft_aux* minfft_mkaux_realdft_3d (int N1, int N2, int N3);
	minfft_aux* minfft_mkaux_realdft (int d, int *Ns);
	void minfft_realdft (minfft_real *x, minfft_cmpl *z, const minfft_aux *a);

Inverse real DFT:
	minfft_aux* minfft_mkaux_realdft_1d (int N);
	minfft_aux* minfft_mkaux_realdft_2d (int N1, int N2);
	minfft_aux* minfft_mkaux_realdft_3d (int N1, int N2, int N3);
	minfft_aux* minfft_mkaux_realdft (int d, int *Ns);
	void minfft_invrealdft (minfft_cmpl *z, minfft_real *y, const minfft_aux *a);

DCT-2:
	minfft_aux* minfft_mkaux_t2t3_1d (int N);
	minfft_aux* minfft_mkaux_t2t3_2d (int N1, int N2);
	minfft_aux* minfft_mkaux_t2t3_3d (int N1, int N2, int N3);
	minfft_aux* minfft_mkaux_t2t3 (int d, int *Ns);
	void minfft_dct2 (minfft_real *x, minfft_real *y, const minfft_aux *a);

DST-2:
	minfft_aux* minfft_mkaux_t2t3_1d (int N);
	minfft_aux* minfft_mkaux_t2t3_2d (int N1, int N2);
	minfft_aux* minfft_mkaux_t2t3_3d (int N1, int N2, int N3);
	minfft_aux* minfft_mkaux_t2t3 (int d, int *Ns);
	void minfft_dst2 (minfft_real *x, minfft_real *y, const minfft_aux *a);

DCT-3:
	minfft_aux* minfft_mkaux_t2t3_1d (int N);
	minfft_aux* minfft_mkaux_t2t3_2d (int N1, int N2);
	minfft_aux* minfft_mkaux_t2t3_3d (int N1, int N2, int N3);
	minfft_aux* minfft_mkaux_t2t3 (int d, int *Ns);
	void minfft_dct3 (minfft_real *x, minfft_real *y, const minfft_aux *a);

DST-3:
	minfft_aux* minfft_mkaux_t2t3_1d (int N);
	minfft_aux* minfft_mkaux_t2t3_2d (int N1, int N2);
	minfft_aux* minfft_mkaux_t2t3_3d (int N1, int N2, int N3);
	minfft_aux* minfft_mkaux_t2t3 (int d, int *Ns);
	void minfft_dst3 (minfft_real *x, minfft_real *y, const minfft_aux *a);

DCT-4:
	minfft_aux* minfft_mkaux_t4_1d (int N);
	minfft_aux* minfft_mkaux_t4_2d (int N1, int N2);
	minfft_aux* minfft_mkaux_t4_3d (int N1, int N2, int N3);
	minfft_aux* minfft_mkaux_t4 (int d, int *Ns);
	void minfft_dct4 (minfft_real *x, minfft_real *y, const minfft_aux *a);

DST-4:
	minfft_aux* minfft_mkaux_t4_1d (int N);
	minfft_aux* minfft_mkaux_t4_2d (int N1, int N2);
	minfft_aux* minfft_mkaux_t4_3d (int N1, int N2, int N3);
	minfft_aux* minfft_mkaux_t4 (int d, int *Ns);
	void minfft_dst4 (minfft_real *x, minfft_real *y, const minfft_aux *a);

If not needed anymore, the memory consumed by the auxiliary data can
be freed by the minfft_free_aux() routine.


CONFORMANCE
-----------
The source code conforms to the C99 and Fortran 2003 standards.


LICENSE
-------
MIT.


SEE ALSO
--------
The complete documentation is available at
	https://github.com/aimukhin/minfft/
